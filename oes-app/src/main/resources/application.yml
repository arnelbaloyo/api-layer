spring:
    application:
        name: ${apiml.service.serviceId}

    output:
        ansi:
            enabled: always


logging:
    level:
        ROOT: INFO
        org.springframework: INFO
        org.apache: INFO
        org.zowe.apiml: INFO

##############################################################################################
# APIML configuration section
##############################################################################################
apiml:
    enabled: true
    service:
        serviceId: oes-app
        title: xxx # Service Spring Integration Enabler sample application API #Â©     #Copyright is for UTF8 encoding check
        description:  xxx # Sample API services to demonstrate Spring Integration Enabler

        discoveryServiceUrls: https://localhost:10011/eureka/

        scheme: https
        serviceIpAddress: 127.0.0.1
        hostname: localhost
        port: 10099

        baseUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}
        contextPath: /${apiml.service.serviceId}

        statusPageRelativeUrl: ${apiml.service.contextPath}/application/info
        healthCheckRelativeUrl: ${apiml.service.contextPath}/application/health

        routes:
            -   gateway-url: "api/v1"
                service-url: ${apiml.service.contextPath}/api/v1
            -   gateway-url: "api/v1/api-doc" # Intentionally using old format to retrieve Api-doc for testing purposes
                service-url: ${apiml.service.contextPath}/api-doc
        apiInfo:
            -   apiId: org.zowe.oes-app
                version: 1.0.0
                gatewayUrl: api/v1
                swaggerUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/v2/api-docs
                documentationUrl: https://www.zowe.org
        catalog:
            tile:
                id: cademoapps
                title: Sample API Mediation Layer Applications
                description: Applications which demonstrate how to make a service integrated to the API Mediation Layer ecosystem
                version: 1.0.1
        ssl:
            enabled: true
            verifySslCertificatesOfServices: true
            protocol: ${server.ssl.protocol}
            keyStoreType: ${server.ssl.keyStoreType}
            trustStoreType: ${server.ssl.trustStoreType}

            ### DEFINE FOLLOWING PROPERTIES IN EXTERNAL CONFIGURATION
            keyAlias: ${server.ssl.keyAlias} #localhost-blah
            keyPassword: ${server.ssl.keyPassword} #password-blah
            keyStore: ${server.ssl.keyStore} #keystore/localhost/localhost.keystore.p12-blah
            keyStorePassword: ${server.ssl.keyStorePassword} #password-blah
            trustStore: ${server.ssl.trustStore} #keystore/localhost/localhost.truststore.p12-blah
            trustStorePassword: ${server.ssl.trustStorePassword} #password-blah

##############################################################################################
management:
    context-path: /application

server:
    port: ${apiml.service.port}
    context-path: ${apiml.service.contextPath}

    ssl:
        enabled: true
        protocol: TLSv1.2
        enabled-protocols: TLSv1.2
        ciphers: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
        keyStoreType: PKCS12
        trustStoreType: PKCS12

        keyAlias: localhost
        keyPassword: password
        keyStore: keystore/localhost/localhost.keystore.p12
        keyStorePassword: password
        trustStore: keystore/localhost/localhost.truststore.p12
        trustStorePassword: password
